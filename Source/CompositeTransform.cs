#if !SILVERLIGHT

// Generated by .NET Reflector from C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\Silverlight\v5.0\System.Windows.dll
namespace System.Windows.Media
{

  //can't descend from Transform because it expects us to implement several abstract methods (it uses some native h/w accelerated implementation probably), but can descend from its ancestor, GeneralTransform
  //however this won't work when wanting to pass to UIElement's RenderTransform, since that one expects a Transform, not its GeneralTransform parent

  public sealed class CompositeTransform : GeneralTransform
  {

    #region --- Fields ---

    public static readonly DependencyProperty CenterXProperty = DependencyProperty.Register("CenterX", typeof(double), typeof(CompositeTransform), new PropertyMetadata(OnCenterXPropertyChanged));
    public static readonly DependencyProperty CenterYProperty = DependencyProperty.Register("CenterY", typeof(double), typeof(CompositeTransform), new PropertyMetadata(OnCenterYPropertyChanged));
    public static readonly DependencyProperty RotationProperty = DependencyProperty.Register("Rotation", typeof(double), typeof(CompositeTransform), new PropertyMetadata(OnRotationPropertyChanged));
    public static readonly DependencyProperty ScaleXProperty = DependencyProperty.Register("ScaleX", typeof(double), typeof(CompositeTransform), new PropertyMetadata(OnScaleXPropertyChanged));
    public static readonly DependencyProperty ScaleYProperty = DependencyProperty.Register("ScaleY", typeof(double), typeof(CompositeTransform), new PropertyMetadata(OnScaleYPropertyChanged));
    public static readonly DependencyProperty SkewXProperty = DependencyProperty.Register("SkewX", typeof(double), typeof(CompositeTransform), new PropertyMetadata(OnSkewXPropertyChanged));
    public static readonly DependencyProperty SkewYProperty = DependencyProperty.Register("SkewY", typeof(double), typeof(CompositeTransform), new PropertyMetadata(OnSkewYPropertyChanged));
    public static readonly DependencyProperty TranslateXProperty = DependencyProperty.Register("TranslateX", typeof(double), typeof(CompositeTransform), new PropertyMetadata(OnTranslateXPropertyChanged));
    public static readonly DependencyProperty TranslateYProperty = DependencyProperty.Register("TranslateY", typeof(double), typeof(CompositeTransform), new PropertyMetadata(OnTranslateYPropertyChanged));

    private TransformGroup transformGroup = new TransformGroup();
    private TranslateTransform translateTransform = new TranslateTransform();
    private ScaleTransform scaleTransform = new ScaleTransform();
    private SkewTransform skewTransform = new SkewTransform();
    private RotateTransform rotateTransform = new RotateTransform();

    #endregion

    #region --- Initialization ---

    public CompositeTransform()
    {
      transformGroup.Children.Add(translateTransform);
      transformGroup.Children.Add(scaleTransform);
      transformGroup.Children.Add(skewTransform);
      transformGroup.Children.Add(rotateTransform);
    }

    #endregion

    #region --- Properties ---

    public double CenterX
    {
      get
      {
        return (double)GetValue(CenterXProperty);
      }
      set
      {
        SetValue(CenterXProperty, value);
      }
    }

    public double CenterY
    {
      get
      {
        return (double)base.GetValue(CenterYProperty);
      }
      set
      {
        base.SetValue(CenterYProperty, value);
      }
    }

    public double Rotation
    {
      get
      {
        return (double)base.GetValue(RotationProperty);
      }
      set
      {
        base.SetValue(RotationProperty, value);
      }
    }

    public double ScaleX
    {
      get
      {
        return (double)base.GetValue(ScaleXProperty);
      }
      set
      {
        base.SetValue(ScaleXProperty, value);
      }
    }

    public double ScaleY
    {
      get
      {
        return (double)base.GetValue(ScaleYProperty);
      }
      set
      {
        base.SetValue(ScaleYProperty, value);
      }
    }

    public double SkewX
    {
      get
      {
        return (double)base.GetValue(SkewXProperty);
      }
      set
      {
        base.SetValue(SkewXProperty, value);
      }
    }

    public double SkewY
    {
      get
      {
        return (double)base.GetValue(SkewYProperty);
      }
      set
      {
        base.SetValue(SkewYProperty, value);
      }
    }

    public double TranslateX
    {
      get
      {
        return (double)base.GetValue(TranslateXProperty);
      }
      set
      {
        base.SetValue(TranslateXProperty, value);
      }
    }

    public double TranslateY
    {
      get
      {
        return (double)base.GetValue(TranslateYProperty);
      }
      set
      {
        base.SetValue(TranslateYProperty, value);
      }
    }

    #endregion

    #region --- Methods ---

    //GeneralTransform abstract methods' implementation//

    public override GeneralTransform Inverse
    {
      get
      {
        return transformGroup.Inverse;
      }
    }

    public override bool TryTransform(Point inPoint, out Point result)
    {
      return transformGroup.TryTransform(inPoint, out result);
    }

    public override Rect TransformBounds(Rect rect)
    {
      return TransformBounds(rect);
    }

    protected override Freezable CreateInstanceCore()
    {
      return new CompositeTransform(); //see https://msdn.microsoft.com/en-us/library/system.windows.freezable.createinstancecore%28v=vs.110%29.aspx
    }

    #endregion

    #region --- Events ---

    private static void OnCenterXPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
      CompositeTransform transform = (CompositeTransform)d;
      transform.OnCenterXPropertyChanged((double)(e.OldValue), (double)(e.NewValue));
    }

    private void OnCenterXPropertyChanged(double oldValue, double newValue)
    {
      if (oldValue != newValue)
      {
        scaleTransform.CenterX = newValue;
        skewTransform.CenterX = newValue;
        rotateTransform.CenterX = newValue;
      }
    }

    //

    private static void OnCenterYPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
      CompositeTransform transform = (CompositeTransform)d;
      transform.OnCenterYPropertyChanged((double)(e.OldValue), (double)(e.NewValue));
    }

    private void OnCenterYPropertyChanged(double oldValue, double newValue)
    {
      if (oldValue != newValue)
      {
        scaleTransform.CenterY = newValue;
        skewTransform.CenterY = newValue;
        rotateTransform.CenterY = newValue;
      }
    }

    //

    private static void OnRotationPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
      CompositeTransform transform = (CompositeTransform)d;
      transform.OnRotationPropertyChanged((double)(e.OldValue), (double)(e.NewValue));
    }

    private void OnRotationPropertyChanged(double oldValue, double newValue)
    {
      if (oldValue != newValue)
        rotateTransform.Angle = newValue;
    }

    //

    private static void OnScaleXPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
      CompositeTransform transform = (CompositeTransform)d;
      transform.OnScaleXPropertyChanged((double)(e.OldValue), (double)(e.NewValue));
    }

    private void OnScaleXPropertyChanged(double oldValue, double newValue)
    {
      if (oldValue != newValue)
        scaleTransform.ScaleX = newValue;
    }

    //

    private static void OnScaleYPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
      CompositeTransform transform = (CompositeTransform)d;
      transform.OnScaleYPropertyChanged((double)(e.OldValue), (double)(e.NewValue));
    }

    private void OnScaleYPropertyChanged(double oldValue, double newValue)
    {
      if (oldValue != newValue)
        scaleTransform.ScaleY = newValue;
    }

    //

    private static void OnSkewXPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
      CompositeTransform transform = (CompositeTransform)d;
      transform.OnSkewXPropertyChanged((double)(e.OldValue), (double)(e.NewValue));
    }

    private void OnSkewXPropertyChanged(double oldValue, double newValue)
    {
      if (oldValue != newValue)
        skewTransform.AngleX = newValue;
    }

    //

    private static void OnSkewYPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
      CompositeTransform transform = (CompositeTransform)d;
      transform.OnSkewYPropertyChanged((double)(e.OldValue), (double)(e.NewValue));
    }

    private void OnSkewYPropertyChanged(double oldValue, double newValue)
    {
      if (oldValue != newValue)
        skewTransform.AngleY = newValue;
    }

    //

    private static void OnTranslateXPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
      CompositeTransform transform = (CompositeTransform)d;
      transform.OnTranslateXPropertyChanged((double)(e.OldValue), (double)(e.NewValue));
    }

    private void OnTranslateXPropertyChanged(double oldValue, double newValue)
    {
      if (oldValue != newValue)
        translateTransform.X = newValue;
    }

    //

    private static void OnTranslateYPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
      CompositeTransform transform = (CompositeTransform)d;
      transform.OnTranslateYPropertyChanged((double)(e.OldValue), (double)(e.NewValue));
    }

    private void OnTranslateYPropertyChanged(double oldValue, double newValue)
    {
      if (oldValue != newValue)
        translateTransform.Y = newValue;
    }

    #endregion

  }
}

#endif
